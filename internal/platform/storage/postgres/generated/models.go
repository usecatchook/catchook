// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package generated

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type AuthType string

const (
	AuthTypeNone      AuthType = "none"
	AuthTypeBasic     AuthType = "basic"
	AuthTypeBearer    AuthType = "bearer"
	AuthTypeApikey    AuthType = "apikey"
	AuthTypeSignature AuthType = "signature"
)

func (e *AuthType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuthType(s)
	case string:
		*e = AuthType(s)
	default:
		return fmt.Errorf("unsupported scan type for AuthType: %T", src)
	}
	return nil
}

type NullAuthType struct {
	AuthType AuthType `json:"auth_type"`
	Valid    bool     `json:"valid"` // Valid is true if AuthType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuthType) Scan(value interface{}) error {
	if value == nil {
		ns.AuthType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuthType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuthType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuthType), nil
}

type DeliveryStatus string

const (
	DeliveryStatusPending  DeliveryStatus = "pending"
	DeliveryStatusSuccess  DeliveryStatus = "success"
	DeliveryStatusFailed   DeliveryStatus = "failed"
	DeliveryStatusRetrying DeliveryStatus = "retrying"
)

func (e *DeliveryStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DeliveryStatus(s)
	case string:
		*e = DeliveryStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DeliveryStatus: %T", src)
	}
	return nil
}

type NullDeliveryStatus struct {
	DeliveryStatus DeliveryStatus `json:"delivery_status"`
	Valid          bool           `json:"valid"` // Valid is true if DeliveryStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDeliveryStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DeliveryStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DeliveryStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDeliveryStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DeliveryStatus), nil
}

type DestinationType string

const (
	DestinationTypeHttp     DestinationType = "http"
	DestinationTypeRabbitmq DestinationType = "rabbitmq"
	DestinationTypeDatabase DestinationType = "database"
	DestinationTypeFile     DestinationType = "file"
	DestinationTypeQueue    DestinationType = "queue"
	DestinationTypeCli      DestinationType = "cli"
)

func (e *DestinationType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DestinationType(s)
	case string:
		*e = DestinationType(s)
	default:
		return fmt.Errorf("unsupported scan type for DestinationType: %T", src)
	}
	return nil
}

type NullDestinationType struct {
	DestinationType DestinationType `json:"destination_type"`
	Valid           bool            `json:"valid"` // Valid is true if DestinationType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDestinationType) Scan(value interface{}) error {
	if value == nil {
		ns.DestinationType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DestinationType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDestinationType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DestinationType), nil
}

type FilterMode string

const (
	FilterModeNocode FilterMode = "nocode"
	FilterModeCode   FilterMode = "code"
)

func (e *FilterMode) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FilterMode(s)
	case string:
		*e = FilterMode(s)
	default:
		return fmt.Errorf("unsupported scan type for FilterMode: %T", src)
	}
	return nil
}

type NullFilterMode struct {
	FilterMode FilterMode `json:"filter_mode"`
	Valid      bool       `json:"valid"` // Valid is true if FilterMode is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFilterMode) Scan(value interface{}) error {
	if value == nil {
		ns.FilterMode, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FilterMode.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFilterMode) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FilterMode), nil
}

type FilterType string

const (
	FilterTypeCondition  FilterType = "condition"
	FilterTypeJavascript FilterType = "javascript"
	FilterTypeJsonpath   FilterType = "jsonpath"
	FilterTypeRegex      FilterType = "regex"
)

func (e *FilterType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FilterType(s)
	case string:
		*e = FilterType(s)
	default:
		return fmt.Errorf("unsupported scan type for FilterType: %T", src)
	}
	return nil
}

type NullFilterType struct {
	FilterType FilterType `json:"filter_type"`
	Valid      bool       `json:"valid"` // Valid is true if FilterType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFilterType) Scan(value interface{}) error {
	if value == nil {
		ns.FilterType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FilterType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFilterType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FilterType), nil
}

type ProtocolType string

const (
	ProtocolTypeHttp      ProtocolType = "http"
	ProtocolTypeGrpc      ProtocolType = "grpc"
	ProtocolTypeMqtt      ProtocolType = "mqtt"
	ProtocolTypeWebsocket ProtocolType = "websocket"
)

func (e *ProtocolType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProtocolType(s)
	case string:
		*e = ProtocolType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProtocolType: %T", src)
	}
	return nil
}

type NullProtocolType struct {
	ProtocolType ProtocolType `json:"protocol_type"`
	Valid        bool         `json:"valid"` // Valid is true if ProtocolType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProtocolType) Scan(value interface{}) error {
	if value == nil {
		ns.ProtocolType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProtocolType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProtocolType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProtocolType), nil
}

type StepStatus string

const (
	StepStatusPending StepStatus = "pending"
	StepStatusSuccess StepStatus = "success"
	StepStatusFailed  StepStatus = "failed"
	StepStatusSkipped StepStatus = "skipped"
)

func (e *StepStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StepStatus(s)
	case string:
		*e = StepStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for StepStatus: %T", src)
	}
	return nil
}

type NullStepStatus struct {
	StepStatus StepStatus `json:"step_status"`
	Valid      bool       `json:"valid"` // Valid is true if StepStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStepStatus) Scan(value interface{}) error {
	if value == nil {
		ns.StepStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StepStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStepStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StepStatus), nil
}

type StepType string

const (
	StepTypeAuth           StepType = "auth"
	StepTypeFilter         StepType = "filter"
	StepTypeTransformation StepType = "transformation"
	StepTypeDelivery       StepType = "delivery"
)

func (e *StepType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StepType(s)
	case string:
		*e = StepType(s)
	default:
		return fmt.Errorf("unsupported scan type for StepType: %T", src)
	}
	return nil
}

type NullStepType struct {
	StepType StepType `json:"step_type"`
	Valid    bool     `json:"valid"` // Valid is true if StepType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStepType) Scan(value interface{}) error {
	if value == nil {
		ns.StepType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StepType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStepType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StepType), nil
}

type TransformationMode string

const (
	TransformationModeNocode TransformationMode = "nocode"
	TransformationModeCode   TransformationMode = "code"
)

func (e *TransformationMode) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransformationMode(s)
	case string:
		*e = TransformationMode(s)
	default:
		return fmt.Errorf("unsupported scan type for TransformationMode: %T", src)
	}
	return nil
}

type NullTransformationMode struct {
	TransformationMode TransformationMode `json:"transformation_mode"`
	Valid              bool               `json:"valid"` // Valid is true if TransformationMode is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransformationMode) Scan(value interface{}) error {
	if value == nil {
		ns.TransformationMode, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransformationMode.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransformationMode) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransformationMode), nil
}

type TransformationType string

const (
	TransformationTypeHeaderAdd    TransformationType = "header_add"
	TransformationTypeHeaderRemove TransformationType = "header_remove"
	TransformationTypeHeaderModify TransformationType = "header_modify"
	TransformationTypeBodyAdd      TransformationType = "body_add"
	TransformationTypeBodyRemove   TransformationType = "body_remove"
	TransformationTypeBodyModify   TransformationType = "body_modify"
	TransformationTypeFormatJson   TransformationType = "format_json"
	TransformationTypeFormatXml    TransformationType = "format_xml"
	TransformationTypeJavascript   TransformationType = "javascript"
	TransformationTypeJsonpath     TransformationType = "jsonpath"
)

func (e *TransformationType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransformationType(s)
	case string:
		*e = TransformationType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransformationType: %T", src)
	}
	return nil
}

type NullTransformationType struct {
	TransformationType TransformationType `json:"transformation_type"`
	Valid              bool               `json:"valid"` // Valid is true if TransformationType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransformationType) Scan(value interface{}) error {
	if value == nil {
		ns.TransformationType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransformationType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransformationType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransformationType), nil
}

type UserRole string

const (
	UserRoleAdmin     UserRole = "admin"
	UserRoleDeveloper UserRole = "developer"
	UserRoleViewer    UserRole = "viewer"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type WebhookStatus string

const (
	WebhookStatusPending     WebhookStatus = "pending"
	WebhookStatusFiltered    WebhookStatus = "filtered"
	WebhookStatusTransformed WebhookStatus = "transformed"
	WebhookStatusDelayed     WebhookStatus = "delayed"
	WebhookStatusDelivered   WebhookStatus = "delivered"
	WebhookStatusFailed      WebhookStatus = "failed"
)

func (e *WebhookStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WebhookStatus(s)
	case string:
		*e = WebhookStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for WebhookStatus: %T", src)
	}
	return nil
}

type NullWebhookStatus struct {
	WebhookStatus WebhookStatus `json:"webhook_status"`
	Valid         bool          `json:"valid"` // Valid is true if WebhookStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWebhookStatus) Scan(value interface{}) error {
	if value == nil {
		ns.WebhookStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WebhookStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWebhookStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.WebhookStatus), nil
}

type Delivery struct {
	ID             uuid.UUID          `db:"id" json:"id"`
	WebhookEventID uuid.UUID          `db:"webhook_event_id" json:"webhook_event_id"`
	DestinationID  uuid.UUID          `db:"destination_id" json:"destination_id"`
	Status         DeliveryStatus     `db:"status" json:"status"`
	ResponseCode   pgtype.Int4        `db:"response_code" json:"response_code"`
	Attempt        pgtype.Int4        `db:"attempt" json:"attempt"`
	LastError      pgtype.Text        `db:"last_error" json:"last_error"`
	ScheduledAt    pgtype.Timestamptz `db:"scheduled_at" json:"scheduled_at"`
	CreatedAt      pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Destination struct {
	ID              uuid.UUID          `db:"id" json:"id"`
	UserID          uuid.UUID          `db:"user_id" json:"user_id"`
	Name            string             `db:"name" json:"name"`
	Description     string             `db:"description" json:"description"`
	DestinationType DestinationType    `db:"destination_type" json:"destination_type"`
	Config          []byte             `db:"config" json:"config"`
	IsActive        bool               `db:"is_active" json:"is_active"`
	DelaySeconds    int32              `db:"delay_seconds" json:"delay_seconds"`
	RetryAttempts   int32              `db:"retry_attempts" json:"retry_attempts"`
	CreatedAt       pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Filter struct {
	ID             uuid.UUID          `db:"id" json:"id"`
	PipelineID     uuid.UUID          `db:"pipeline_id" json:"pipeline_id"`
	Name           string             `db:"name" json:"name"`
	Description    pgtype.Text        `db:"description" json:"description"`
	FilterType     FilterType         `db:"filter_type" json:"filter_type"`
	Mode           FilterMode         `db:"mode" json:"mode"`
	Config         []byte             `db:"config" json:"config"`
	Code           pgtype.Text        `db:"code" json:"code"`
	IsActive       bool               `db:"is_active" json:"is_active"`
	ExecutionOrder int32              `db:"execution_order" json:"execution_order"`
	CreatedAt      pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Pipeline struct {
	ID             uuid.UUID          `db:"id" json:"id"`
	UserID         uuid.UUID          `db:"user_id" json:"user_id"`
	SourceID       uuid.UUID          `db:"source_id" json:"source_id"`
	DestinationID  uuid.UUID          `db:"destination_id" json:"destination_id"`
	Name           string             `db:"name" json:"name"`
	Description    string             `db:"description" json:"description"`
	IsActive       bool               `db:"is_active" json:"is_active"`
	ExecutionOrder int32              `db:"execution_order" json:"execution_order"`
	CreatedAt      pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Source struct {
	ID          uuid.UUID          `db:"id" json:"id"`
	UserID      uuid.UUID          `db:"user_id" json:"user_id"`
	Name        string             `db:"name" json:"name"`
	Description string             `db:"description" json:"description"`
	Protocol    ProtocolType       `db:"protocol" json:"protocol"`
	AuthType    AuthType           `db:"auth_type" json:"auth_type"`
	AuthConfig  []byte             `db:"auth_config" json:"auth_config"`
	IsActive    bool               `db:"is_active" json:"is_active"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Transformation struct {
	ID                 uuid.UUID          `db:"id" json:"id"`
	PipelineID         uuid.UUID          `db:"pipeline_id" json:"pipeline_id"`
	Name               string             `db:"name" json:"name"`
	Description        pgtype.Text        `db:"description" json:"description"`
	TransformationType TransformationType `db:"transformation_type" json:"transformation_type"`
	Mode               TransformationMode `db:"mode" json:"mode"`
	Config             []byte             `db:"config" json:"config"`
	Code               pgtype.Text        `db:"code" json:"code"`
	IsActive           bool               `db:"is_active" json:"is_active"`
	ExecutionOrder     int32              `db:"execution_order" json:"execution_order"`
	CreatedAt          pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type User struct {
	ID           uuid.UUID          `db:"id" json:"id"`
	Email        string             `db:"email" json:"email"`
	Role         UserRole           `db:"role" json:"role"`
	PasswordHash string             `db:"password_hash" json:"password_hash"`
	FirstName    string             `db:"first_name" json:"first_name"`
	LastName     string             `db:"last_name" json:"last_name"`
	IsActive     bool               `db:"is_active" json:"is_active"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type WebhookEvent struct {
	ID                    uuid.UUID          `db:"id" json:"id"`
	SourceID              uuid.UUID          `db:"source_id" json:"source_id"`
	PipelineID            pgtype.UUID        `db:"pipeline_id" json:"pipeline_id"`
	Payload               []byte             `db:"payload" json:"payload"`
	OriginalPayload       []byte             `db:"original_payload" json:"original_payload"`
	Metadata              []byte             `db:"metadata" json:"metadata"`
	FilterResults         []byte             `db:"filter_results" json:"filter_results"`
	TransformationResults []byte             `db:"transformation_results" json:"transformation_results"`
	Status                WebhookStatus      `db:"status" json:"status"`
	ErrorMessage          pgtype.Text        `db:"error_message" json:"error_message"`
	ScheduledAt           pgtype.Timestamptz `db:"scheduled_at" json:"scheduled_at"`
	ProcessedAt           pgtype.Timestamptz `db:"processed_at" json:"processed_at"`
	CreatedAt             pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt             pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type WebhookStep struct {
	ID             uuid.UUID          `db:"id" json:"id"`
	WebhookEventID uuid.UUID          `db:"webhook_event_id" json:"webhook_event_id"`
	PipelineID     pgtype.UUID        `db:"pipeline_id" json:"pipeline_id"`
	StepType       StepType           `db:"step_type" json:"step_type"`
	StepName       string             `db:"step_name" json:"step_name"`
	StepID         pgtype.UUID        `db:"step_id" json:"step_id"`
	ExecutionOrder int32              `db:"execution_order" json:"execution_order"`
	Status         StepStatus         `db:"status" json:"status"`
	InputData      []byte             `db:"input_data" json:"input_data"`
	OutputData     []byte             `db:"output_data" json:"output_data"`
	ErrorMessage   pgtype.Text        `db:"error_message" json:"error_message"`
	DurationMs     pgtype.Int4        `db:"duration_ms" json:"duration_ms"`
	StartedAt      pgtype.Timestamptz `db:"started_at" json:"started_at"`
	CompletedAt    pgtype.Timestamptz `db:"completed_at" json:"completed_at"`
	CreatedAt      pgtype.Timestamptz `db:"created_at" json:"created_at"`
}
