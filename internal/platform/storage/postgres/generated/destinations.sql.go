// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: destinations.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countDestinations = `-- name: CountDestinations :one
SELECT COUNT(*) FROM destinations
WHERE 
    ($1 = '' OR name ILIKE '%' || $1 || '%' OR description ILIKE '%' || $1 || '%')
    AND ($2 = '' OR destination_type = $2::destination_type)
    AND (NOT $3 OR is_active = $4)
`

func (q *Queries) CountDestinations(ctx context.Context, column1 interface{}, column2 interface{}, column3 interface{}, isActive bool) (int64, error) {
	row := q.db.QueryRow(ctx, countDestinations,
		column1,
		column2,
		column3,
		isActive,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createDestination = `-- name: CreateDestination :one
INSERT INTO destinations (
    user_id, name, description, destination_type, config, is_active, delay_seconds, retry_attempts
) VALUES ($1, $2, $3, $4, COALESCE($5, '{}'::jsonb), COALESCE($6, TRUE), COALESCE($7, 0), COALESCE($8, 0))
RETURNING id, user_id, name, description, destination_type, config, is_active, delay_seconds, retry_attempts, created_at, updated_at
`

func (q *Queries) CreateDestination(ctx context.Context, userID uuid.UUID, name string, description string, destinationType DestinationType, column5 interface{}, column6 interface{}, column7 interface{}, column8 interface{}) (Destination, error) {
	row := q.db.QueryRow(ctx, createDestination,
		userID,
		name,
		description,
		destinationType,
		column5,
		column6,
		column7,
		column8,
	)
	var i Destination
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.DestinationType,
		&i.Config,
		&i.IsActive,
		&i.DelaySeconds,
		&i.RetryAttempts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDestination = `-- name: DeleteDestination :exec
DELETE FROM destinations WHERE id = $1
`

func (q *Queries) DeleteDestination(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteDestination, id)
	return err
}

const getDestinationByID = `-- name: GetDestinationByID :one
SELECT id, user_id, name, description, destination_type, config, is_active, delay_seconds, retry_attempts, created_at, updated_at FROM destinations WHERE id = $1
`

func (q *Queries) GetDestinationByID(ctx context.Context, id uuid.UUID) (Destination, error) {
	row := q.db.QueryRow(ctx, getDestinationByID, id)
	var i Destination
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.DestinationType,
		&i.Config,
		&i.IsActive,
		&i.DelaySeconds,
		&i.RetryAttempts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDestinationByName = `-- name: GetDestinationByName :one
SELECT id, user_id, name, description, destination_type, config, is_active, delay_seconds, retry_attempts, created_at, updated_at FROM destinations WHERE name = $1
`

func (q *Queries) GetDestinationByName(ctx context.Context, name string) (Destination, error) {
	row := q.db.QueryRow(ctx, getDestinationByName, name)
	var i Destination
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.DestinationType,
		&i.Config,
		&i.IsActive,
		&i.DelaySeconds,
		&i.RetryAttempts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDestinations = `-- name: ListDestinations :many
SELECT name, description, destination_type, is_active, created_at, updated_at FROM destinations
WHERE 
    ($1 = '' OR name ILIKE '%' || $1 || '%' OR description ILIKE '%' || $1 || '%')
    AND ($2 = '' OR destination_type = $2::destination_type)
    AND (NOT $3 OR is_active = $4)
ORDER BY 
    CASE 
        WHEN $5 = 'name' AND $6 = 'asc' THEN name
    END ASC,
    CASE 
        WHEN $5 = 'name' AND $6 = 'desc' THEN name
    END DESC,
    CASE 
        WHEN $5 = 'created_at' AND $6 = 'asc' THEN created_at
    END ASC,
    CASE 
        WHEN $5 = 'updated_at' AND $6 = 'asc' THEN updated_at
    END ASC,
    CASE 
        WHEN $5 = 'updated_at' AND $6 = 'desc' THEN updated_at
    END DESC,
    CASE 
        WHEN $5 = 'is_active' AND $6 = 'asc' THEN is_active
    END ASC,
    CASE 
        WHEN $5 = 'is_active' AND $6 = 'desc' THEN is_active
    END DESC,
    CASE 
        WHEN $5 = 'created_at' AND $6 = 'desc' OR $5 = '' OR $5 IS NULL THEN created_at
    END DESC
LIMIT $7 OFFSET $8
`

type ListDestinationsRow struct {
	Name            string             `db:"name" json:"name"`
	Description     string             `db:"description" json:"description"`
	DestinationType DestinationType    `db:"destination_type" json:"destination_type"`
	IsActive        bool               `db:"is_active" json:"is_active"`
	CreatedAt       pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) ListDestinations(ctx context.Context, column1 interface{}, column2 interface{}, column3 interface{}, isActive bool, column5 interface{}, column6 interface{}, limit int32, offset int32) ([]ListDestinationsRow, error) {
	rows, err := q.db.Query(ctx, listDestinations,
		column1,
		column2,
		column3,
		isActive,
		column5,
		column6,
		limit,
		offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListDestinationsRow{}
	for rows.Next() {
		var i ListDestinationsRow
		if err := rows.Scan(
			&i.Name,
			&i.Description,
			&i.DestinationType,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDestination = `-- name: UpdateDestination :one
UPDATE destinations SET
    name = COALESCE($2, name),
    description = COALESCE($3, description),
    destination_type = COALESCE($4, destination_type),
    config = COALESCE($5, config),
    is_active = COALESCE($6, is_active),
    delay_seconds = COALESCE($7, delay_seconds),
    retry_attempts = COALESCE($8, retry_attempts),
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, name, description, destination_type, config, is_active, delay_seconds, retry_attempts, created_at, updated_at
`

func (q *Queries) UpdateDestination(ctx context.Context, iD uuid.UUID, name string, description string, destinationType DestinationType, config []byte, isActive bool, delaySeconds int32, retryAttempts int32) (Destination, error) {
	row := q.db.QueryRow(ctx, updateDestination,
		iD,
		name,
		description,
		destinationType,
		config,
		isActive,
		delaySeconds,
		retryAttempts,
	)
	var i Destination
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.DestinationType,
		&i.Config,
		&i.IsActive,
		&i.DelaySeconds,
		&i.RetryAttempts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
