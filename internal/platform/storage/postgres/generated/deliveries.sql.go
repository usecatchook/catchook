// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: deliveries.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createDelivery = `-- name: CreateDelivery :one
INSERT INTO deliveries (
    webhook_event_id, destination_id, status, response_code, attempt, last_error, scheduled_at
) VALUES ($1, $2, $3, $4, COALESCE($5, 0), $6, $7)
RETURNING id, webhook_event_id, destination_id, status, response_code, attempt, last_error, scheduled_at, created_at, updated_at
`

func (q *Queries) CreateDelivery(ctx context.Context, webhookEventID uuid.UUID, destinationID uuid.UUID, status DeliveryStatus, responseCode pgtype.Int4, column5 interface{}, lastError pgtype.Text, scheduledAt pgtype.Timestamptz) (Delivery, error) {
	row := q.db.QueryRow(ctx, createDelivery,
		webhookEventID,
		destinationID,
		status,
		responseCode,
		column5,
		lastError,
		scheduledAt,
	)
	var i Delivery
	err := row.Scan(
		&i.ID,
		&i.WebhookEventID,
		&i.DestinationID,
		&i.Status,
		&i.ResponseCode,
		&i.Attempt,
		&i.LastError,
		&i.ScheduledAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDelivery = `-- name: DeleteDelivery :exec
DELETE FROM deliveries WHERE id = $1
`

func (q *Queries) DeleteDelivery(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteDelivery, id)
	return err
}

const getDeliveryByID = `-- name: GetDeliveryByID :one
SELECT id, webhook_event_id, destination_id, status, response_code, attempt, last_error, scheduled_at, created_at, updated_at FROM deliveries WHERE id = $1
`

func (q *Queries) GetDeliveryByID(ctx context.Context, id uuid.UUID) (Delivery, error) {
	row := q.db.QueryRow(ctx, getDeliveryByID, id)
	var i Delivery
	err := row.Scan(
		&i.ID,
		&i.WebhookEventID,
		&i.DestinationID,
		&i.Status,
		&i.ResponseCode,
		&i.Attempt,
		&i.LastError,
		&i.ScheduledAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDeliveriesByWebhookEvent = `-- name: ListDeliveriesByWebhookEvent :many
SELECT id, webhook_event_id, destination_id, status, response_code, attempt, last_error, scheduled_at, created_at, updated_at FROM deliveries WHERE webhook_event_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListDeliveriesByWebhookEvent(ctx context.Context, webhookEventID uuid.UUID) ([]Delivery, error) {
	rows, err := q.db.Query(ctx, listDeliveriesByWebhookEvent, webhookEventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Delivery{}
	for rows.Next() {
		var i Delivery
		if err := rows.Scan(
			&i.ID,
			&i.WebhookEventID,
			&i.DestinationID,
			&i.Status,
			&i.ResponseCode,
			&i.Attempt,
			&i.LastError,
			&i.ScheduledAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDelivery = `-- name: UpdateDelivery :one
UPDATE deliveries SET
    status = COALESCE($2, status),
    response_code = COALESCE($3, response_code),
    attempt = COALESCE($4, attempt),
    last_error = COALESCE($5, last_error),
    scheduled_at = COALESCE($6, scheduled_at),
    updated_at = NOW()
WHERE id = $1
RETURNING id, webhook_event_id, destination_id, status, response_code, attempt, last_error, scheduled_at, created_at, updated_at
`

func (q *Queries) UpdateDelivery(ctx context.Context, iD uuid.UUID, status DeliveryStatus, responseCode pgtype.Int4, attempt pgtype.Int4, lastError pgtype.Text, scheduledAt pgtype.Timestamptz) (Delivery, error) {
	row := q.db.QueryRow(ctx, updateDelivery,
		iD,
		status,
		responseCode,
		attempt,
		lastError,
		scheduledAt,
	)
	var i Delivery
	err := row.Scan(
		&i.ID,
		&i.WebhookEventID,
		&i.DestinationID,
		&i.Status,
		&i.ResponseCode,
		&i.Attempt,
		&i.LastError,
		&i.ScheduledAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
