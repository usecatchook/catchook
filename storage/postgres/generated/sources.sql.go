// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sources.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSource = `-- name: CreateSource :one
INSERT INTO sources (
    user_id, name, description, protocol, auth_type, auth_config, is_active
) VALUES ($1, $2, $3, $4, $5, $6, COALESCE($7, TRUE))
RETURNING id, user_id, name, description, protocol, auth_type, auth_config, is_active, created_at, updated_at
`

func (q *Queries) CreateSource(ctx context.Context, userID pgtype.UUID, name string, description pgtype.Text, protocol ProtocolType, authType AuthType, authConfig []byte, column7 interface{}) (Source, error) {
	row := q.db.QueryRow(ctx, createSource,
		userID,
		name,
		description,
		protocol,
		authType,
		authConfig,
		column7,
	)
	var i Source
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Protocol,
		&i.AuthType,
		&i.AuthConfig,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSource = `-- name: DeleteSource :exec
DELETE FROM sources WHERE id = $1
`

func (q *Queries) DeleteSource(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSource, id)
	return err
}

const getSourceByID = `-- name: GetSourceByID :one
SELECT id, user_id, name, description, protocol, auth_type, auth_config, is_active, created_at, updated_at FROM sources WHERE id = $1
`

func (q *Queries) GetSourceByID(ctx context.Context, id pgtype.UUID) (Source, error) {
	row := q.db.QueryRow(ctx, getSourceByID, id)
	var i Source
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Protocol,
		&i.AuthType,
		&i.AuthConfig,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSourcesByUser = `-- name: ListSourcesByUser :many
SELECT id, user_id, name, description, protocol, auth_type, auth_config, is_active, created_at, updated_at FROM sources WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListSourcesByUser(ctx context.Context, userID pgtype.UUID) ([]Source, error) {
	rows, err := q.db.Query(ctx, listSourcesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Source{}
	for rows.Next() {
		var i Source
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.Protocol,
			&i.AuthType,
			&i.AuthConfig,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSource = `-- name: UpdateSource :one
UPDATE sources SET
   name = COALESCE($2, name),
   description = COALESCE($3, description),
   protocol = COALESCE($4, protocol),
   auth_type = COALESCE($5, auth_type),
   auth_config = COALESCE($6, auth_config),
   is_active = COALESCE($7, is_active),
   updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, name, description, protocol, auth_type, auth_config, is_active, created_at, updated_at
`

func (q *Queries) UpdateSource(ctx context.Context, iD pgtype.UUID, name string, description pgtype.Text, protocol ProtocolType, authType AuthType, authConfig []byte, isActive pgtype.Bool) (Source, error) {
	row := q.db.QueryRow(ctx, updateSource,
		iD,
		name,
		description,
		protocol,
		authType,
		authConfig,
		isActive,
	)
	var i Source
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Protocol,
		&i.AuthType,
		&i.AuthConfig,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
