// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: webhook_events.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createWebhookEvent = `-- name: CreateWebhookEvent :one
INSERT INTO webhook_events (
    source_id, payload, metadata, applied_rule_version_id, status, scheduled_at
) VALUES ($1, $2, COALESCE($3, '{}'::jsonb), $4, $5, $6)
RETURNING id, source_id, payload, metadata, applied_rule_version_id, status, scheduled_at, created_at, updated_at
`

func (q *Queries) CreateWebhookEvent(ctx context.Context, sourceID uuid.UUID, payload []byte, column3 interface{}, appliedRuleVersionID pgtype.UUID, status WebhookStatus, scheduledAt pgtype.Timestamptz) (WebhookEvent, error) {
	row := q.db.QueryRow(ctx, createWebhookEvent,
		sourceID,
		payload,
		column3,
		appliedRuleVersionID,
		status,
		scheduledAt,
	)
	var i WebhookEvent
	err := row.Scan(
		&i.ID,
		&i.SourceID,
		&i.Payload,
		&i.Metadata,
		&i.AppliedRuleVersionID,
		&i.Status,
		&i.ScheduledAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWebhookEvent = `-- name: DeleteWebhookEvent :exec
DELETE FROM webhook_events WHERE id = $1
`

func (q *Queries) DeleteWebhookEvent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteWebhookEvent, id)
	return err
}

const getWebhookEventByID = `-- name: GetWebhookEventByID :one
SELECT id, source_id, payload, metadata, applied_rule_version_id, status, scheduled_at, created_at, updated_at FROM webhook_events WHERE id = $1
`

func (q *Queries) GetWebhookEventByID(ctx context.Context, id uuid.UUID) (WebhookEvent, error) {
	row := q.db.QueryRow(ctx, getWebhookEventByID, id)
	var i WebhookEvent
	err := row.Scan(
		&i.ID,
		&i.SourceID,
		&i.Payload,
		&i.Metadata,
		&i.AppliedRuleVersionID,
		&i.Status,
		&i.ScheduledAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listWebhookEventsBySource = `-- name: ListWebhookEventsBySource :many
SELECT id, source_id, payload, metadata, applied_rule_version_id, status, scheduled_at, created_at, updated_at FROM webhook_events
WHERE source_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListWebhookEventsBySource(ctx context.Context, sourceID uuid.UUID) ([]WebhookEvent, error) {
	rows, err := q.db.Query(ctx, listWebhookEventsBySource, sourceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WebhookEvent{}
	for rows.Next() {
		var i WebhookEvent
		if err := rows.Scan(
			&i.ID,
			&i.SourceID,
			&i.Payload,
			&i.Metadata,
			&i.AppliedRuleVersionID,
			&i.Status,
			&i.ScheduledAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWebhookEventsBySourceAndStatus = `-- name: ListWebhookEventsBySourceAndStatus :many
SELECT id, source_id, payload, metadata, applied_rule_version_id, status, scheduled_at, created_at, updated_at FROM webhook_events
WHERE source_id = $1 AND status = $2
ORDER BY created_at DESC
`

func (q *Queries) ListWebhookEventsBySourceAndStatus(ctx context.Context, sourceID uuid.UUID, status WebhookStatus) ([]WebhookEvent, error) {
	rows, err := q.db.Query(ctx, listWebhookEventsBySourceAndStatus, sourceID, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WebhookEvent{}
	for rows.Next() {
		var i WebhookEvent
		if err := rows.Scan(
			&i.ID,
			&i.SourceID,
			&i.Payload,
			&i.Metadata,
			&i.AppliedRuleVersionID,
			&i.Status,
			&i.ScheduledAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWebhookEvent = `-- name: UpdateWebhookEvent :one
UPDATE webhook_events SET
    status = COALESCE($2, status),
    metadata = COALESCE($3, metadata),
    applied_rule_version_id = COALESCE($4, applied_rule_version_id),
    scheduled_at = COALESCE($5, scheduled_at),
    updated_at = NOW()
WHERE id = $1
RETURNING id, source_id, payload, metadata, applied_rule_version_id, status, scheduled_at, created_at, updated_at
`

func (q *Queries) UpdateWebhookEvent(ctx context.Context, iD uuid.UUID, status WebhookStatus, metadata []byte, appliedRuleVersionID pgtype.UUID, scheduledAt pgtype.Timestamptz) (WebhookEvent, error) {
	row := q.db.QueryRow(ctx, updateWebhookEvent,
		iD,
		status,
		metadata,
		appliedRuleVersionID,
		scheduledAt,
	)
	var i WebhookEvent
	err := row.Scan(
		&i.ID,
		&i.SourceID,
		&i.Payload,
		&i.Metadata,
		&i.AppliedRuleVersionID,
		&i.Status,
		&i.ScheduledAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
