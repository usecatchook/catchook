// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkEmailExists = `-- name: CheckEmailExists :one
SELECT EXISTS(
    SELECT 1 FROM users 
    WHERE email = $1 AND is_active = true
)
`

func (q *Queries) CheckEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, checkEmailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users 
WHERE is_active = true
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email, 
    role,
    password_hash, 
    first_name, 
    last_name,
    is_active
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, email, role, password_hash, first_name, last_name, is_active, created_at, updated_at
`

func (q *Queries) CreateUser(ctx context.Context, email string, role UserRole, passwordHash string, firstName string, lastName string, isActive bool) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		email,
		role,
		passwordHash,
		firstName,
		lastName,
		isActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivateUser = `-- name: DeactivateUser :exec
UPDATE users 
SET 
    is_active = false,
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) DeactivateUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deactivateUser, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users 
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, role, password_hash, first_name, last_name, is_active, created_at, updated_at FROM users 
WHERE email = $1 AND is_active = true
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmailWithPassword = `-- name: GetUserByEmailWithPassword :one
SELECT id, email, role, password_hash, first_name, last_name, is_active, created_at, updated_at FROM users 
WHERE email = $1
`

func (q *Queries) GetUserByEmailWithPassword(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmailWithPassword, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, role, password_hash, first_name, last_name, is_active, created_at, updated_at FROM users 
WHERE id = $1 AND is_active = true
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, role, password_hash, first_name, last_name, is_active, created_at, updated_at FROM users 
WHERE is_active = true
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

func (q *Queries) ListUsers(ctx context.Context, limit int32, offset int32) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, limit, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Role,
			&i.PasswordHash,
			&i.FirstName,
			&i.LastName,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET 
    role = $2,
    first_name = $3,
    last_name = $4,
    updated_at = NOW()
WHERE id = $1 AND is_active = true
RETURNING id, email, role, password_hash, first_name, last_name, is_active, created_at, updated_at
`

func (q *Queries) UpdateUser(ctx context.Context, iD pgtype.UUID, role UserRole, firstName string, lastName string) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		iD,
		role,
		firstName,
		lastName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users 
SET 
    password_hash = $2,
    updated_at = NOW()
WHERE id = $1 AND is_active = true
RETURNING id, email, role, password_hash, first_name, last_name, is_active, created_at, updated_at
`

func (q *Queries) UpdateUserPassword(ctx context.Context, iD pgtype.UUID, passwordHash string) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, iD, passwordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
