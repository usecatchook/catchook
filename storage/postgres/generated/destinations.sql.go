// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: destinations.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDestination = `-- name: CreateDestination :one
INSERT INTO destinations (
    user_id, name, description, destination_type, config, is_active, delay_seconds, retry_attempts
) VALUES ($1, $2, $3, $4, COALESCE($5, '{}'::jsonb), COALESCE($6, TRUE), COALESCE($7, 0), COALESCE($8, 0))
RETURNING id, user_id, name, description, destination_type, config, is_active, delay_seconds, retry_attempts, created_at, updated_at
`

func (q *Queries) CreateDestination(ctx context.Context, userID pgtype.UUID, name string, description pgtype.Text, destinationType DestinationType, column5 interface{}, column6 interface{}, column7 interface{}, column8 interface{}) (Destination, error) {
	row := q.db.QueryRow(ctx, createDestination,
		userID,
		name,
		description,
		destinationType,
		column5,
		column6,
		column7,
		column8,
	)
	var i Destination
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.DestinationType,
		&i.Config,
		&i.IsActive,
		&i.DelaySeconds,
		&i.RetryAttempts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDestination = `-- name: DeleteDestination :exec
DELETE FROM destinations WHERE id = $1
`

func (q *Queries) DeleteDestination(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteDestination, id)
	return err
}

const getDestinationByID = `-- name: GetDestinationByID :one
SELECT id, user_id, name, description, destination_type, config, is_active, delay_seconds, retry_attempts, created_at, updated_at FROM destinations WHERE id = $1
`

func (q *Queries) GetDestinationByID(ctx context.Context, id pgtype.UUID) (Destination, error) {
	row := q.db.QueryRow(ctx, getDestinationByID, id)
	var i Destination
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.DestinationType,
		&i.Config,
		&i.IsActive,
		&i.DelaySeconds,
		&i.RetryAttempts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listActiveDestinationsByUser = `-- name: ListActiveDestinationsByUser :many
SELECT id, user_id, name, description, destination_type, config, is_active, delay_seconds, retry_attempts, created_at, updated_at FROM destinations WHERE user_id = $1 AND is_active = TRUE ORDER BY created_at DESC
`

func (q *Queries) ListActiveDestinationsByUser(ctx context.Context, userID pgtype.UUID) ([]Destination, error) {
	rows, err := q.db.Query(ctx, listActiveDestinationsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Destination{}
	for rows.Next() {
		var i Destination
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.DestinationType,
			&i.Config,
			&i.IsActive,
			&i.DelaySeconds,
			&i.RetryAttempts,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDestination = `-- name: UpdateDestination :one
UPDATE destinations SET
    name = COALESCE($2, name),
    description = COALESCE($3, description),
    destination_type = COALESCE($4, destination_type),
    config = COALESCE($5, config),
    is_active = COALESCE($6, is_active),
    delay_seconds = COALESCE($7, delay_seconds),
    retry_attempts = COALESCE($8, retry_attempts),
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, name, description, destination_type, config, is_active, delay_seconds, retry_attempts, created_at, updated_at
`

func (q *Queries) UpdateDestination(ctx context.Context, iD pgtype.UUID, name string, description pgtype.Text, destinationType DestinationType, config []byte, isActive pgtype.Bool, delaySeconds pgtype.Int4, retryAttempts pgtype.Int4) (Destination, error) {
	row := q.db.QueryRow(ctx, updateDestination,
		iD,
		name,
		description,
		destinationType,
		config,
		isActive,
		delaySeconds,
		retryAttempts,
	)
	var i Destination
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.DestinationType,
		&i.Config,
		&i.IsActive,
		&i.DelaySeconds,
		&i.RetryAttempts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
