// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rules.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRule = `-- name: CreateRule :one
INSERT INTO rules (
    user_id, source_id, destination_id, name, version, is_active, mode, config, code
) VALUES ($1, $2, $3, $4, COALESCE($5, 1), COALESCE($6, TRUE), $7, COALESCE($8, '{}'::jsonb), $9)
RETURNING id, user_id, source_id, destination_id, name, version, is_active, mode, config, code, created_at, updated_at
`

func (q *Queries) CreateRule(ctx context.Context, userID pgtype.UUID, sourceID pgtype.UUID, destinationID pgtype.UUID, name string, column5 interface{}, column6 interface{}, mode RuleMode, column8 interface{}, code pgtype.Text) (Rule, error) {
	row := q.db.QueryRow(ctx, createRule,
		userID,
		sourceID,
		destinationID,
		name,
		column5,
		column6,
		mode,
		column8,
		code,
	)
	var i Rule
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SourceID,
		&i.DestinationID,
		&i.Name,
		&i.Version,
		&i.IsActive,
		&i.Mode,
		&i.Config,
		&i.Code,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRule = `-- name: DeleteRule :exec
DELETE FROM rules WHERE id = $1
`

func (q *Queries) DeleteRule(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteRule, id)
	return err
}

const getRuleByID = `-- name: GetRuleByID :one
SELECT id, user_id, source_id, destination_id, name, version, is_active, mode, config, code, created_at, updated_at FROM rules WHERE id = $1
`

func (q *Queries) GetRuleByID(ctx context.Context, id pgtype.UUID) (Rule, error) {
	row := q.db.QueryRow(ctx, getRuleByID, id)
	var i Rule
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SourceID,
		&i.DestinationID,
		&i.Name,
		&i.Version,
		&i.IsActive,
		&i.Mode,
		&i.Config,
		&i.Code,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listActiveRulesByUser = `-- name: ListActiveRulesByUser :many
SELECT id, user_id, source_id, destination_id, name, version, is_active, mode, config, code, created_at, updated_at FROM rules WHERE user_id = $1 AND is_active = TRUE ORDER BY created_at DESC
`

func (q *Queries) ListActiveRulesByUser(ctx context.Context, userID pgtype.UUID) ([]Rule, error) {
	rows, err := q.db.Query(ctx, listActiveRulesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rule{}
	for rows.Next() {
		var i Rule
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SourceID,
			&i.DestinationID,
			&i.Name,
			&i.Version,
			&i.IsActive,
			&i.Mode,
			&i.Config,
			&i.Code,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRulesBySourceAndDestination = `-- name: ListRulesBySourceAndDestination :many
SELECT id, user_id, source_id, destination_id, name, version, is_active, mode, config, code, created_at, updated_at FROM rules WHERE source_id = $1 AND destination_id = $2 ORDER BY version DESC
`

func (q *Queries) ListRulesBySourceAndDestination(ctx context.Context, sourceID pgtype.UUID, destinationID pgtype.UUID) ([]Rule, error) {
	rows, err := q.db.Query(ctx, listRulesBySourceAndDestination, sourceID, destinationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rule{}
	for rows.Next() {
		var i Rule
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SourceID,
			&i.DestinationID,
			&i.Name,
			&i.Version,
			&i.IsActive,
			&i.Mode,
			&i.Config,
			&i.Code,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRule = `-- name: UpdateRule :one
UPDATE rules SET
    name = COALESCE($2, name),
    version = COALESCE($3, version),
    is_active = COALESCE($4, is_active),
    mode = COALESCE($5, mode),
    config = COALESCE($6, config),
    code = COALESCE($7, code),
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, source_id, destination_id, name, version, is_active, mode, config, code, created_at, updated_at
`

func (q *Queries) UpdateRule(ctx context.Context, iD pgtype.UUID, name string, version int32, isActive bool, mode RuleMode, config []byte, code pgtype.Text) (Rule, error) {
	row := q.db.QueryRow(ctx, updateRule,
		iD,
		name,
		version,
		isActive,
		mode,
		config,
		code,
	)
	var i Rule
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SourceID,
		&i.DestinationID,
		&i.Name,
		&i.Version,
		&i.IsActive,
		&i.Mode,
		&i.Config,
		&i.Code,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
